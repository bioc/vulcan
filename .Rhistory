vobj<-vulcan.import(vfile)
unlink(vfile)
# Annotate peaks to gene names
vobj<-vulcan.annotate(vobj,lborder=-10000,rborder=10000,method="sum")
# Normalize data for VULCAN analysis
vobj<-vulcan.normalize(vobj)
# Detect which conditions are present
names(vobj$samples)
library(evtools)
library(devtools)
document()
library(vulcan)
library(vulcan)
library(vulcan)
?vulcan
# Generate an annotation file from the dummy ChIP-Seq dataset
vfile<-"deleteme.csv"
vulcansheet(vfile)
# Import BAM and BED information into a list object
vobj<-vulcan.import(vfile)
unlink(vfile)
# Annotate peaks to gene names
vobj<-vulcan.annotate(vobj,lborder=-10000,rborder=10000,method="sum")
# Normalize data for VULCAN analysis
vobj<-vulcan.normalize(vobj)
# Detect which conditions are present
names(vobj$samples)
# Load an ARACNe network
# This is a regulon object as specified in the VIPER package, named "network"
load(system.file("extdata","network.rda",package="vulcan",mustWork=TRUE))
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Which genes is this chromosome covering?
# Generate an annotation file from the vulcandata reduced dataset
vfile<-"deleteme.csv"
vulcansheet(vfile)
# Import BAM and BED information into a list object
vobj<-vulcan.import(vfile)
unlink(vfile)
# Annotate peaks to gene names
vobj<-vulcan.annotate(vobj,lborder=-10000,rborder=10000,method="sum")
# Normalize data for VULCAN analysis
vobj<-vulcan.normalize(vobj)
# Detect which conditions are present
names(vobj$samples)
tt<-apply(vobj$normalized,1,function(x){tt<-t.test(x[1:4],x[9:12]);return(tt$stat)})
genes<-names(sort(tt))
### Generate dummy network (network.rda)
set.seed(1)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],50)
tfmode<-setNames(runif(length(genes),-1,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],50)
tfmode<-setNames(runif(length(genes),-1,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
genes
### Generate dummy network (network.rda)
set.seed(1)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-1,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
set.seed(1)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),0,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(1)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),0,1),subgenes)
likelihood<-runif(length(genes),-0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
set.seed(1)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(2)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(3)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(3)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],20)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],20)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(4)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(5)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
set.seed(6)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(10)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(11)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(20)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(30)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0.5,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(30)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
### Generate dummy network (network.rda)
set.seed(40)
network<-list()
for(tf in c("YBX1","CLOCK","RB1")){
subgenes<-sample(genes[1:floor(length(genes)/2)],45)
tfmode<-setNames(runif(length(genes),-1,0.5),subgenes)
likelihood<-runif(length(genes),0,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
for(tf in c("ESR1","GATA3","RARA","FOXM1","RXRA")){
subgenes<-sample(genes[ceiling(length(genes)/2):length(genes)],45)
tfmode<-setNames(runif(length(genes),-0.5,1),subgenes)
likelihood<-runif(length(genes),0,1)
subnet<-list(tfmode=tfmode,likelihood=likelihood)
network[[tf]]<-subnet
}
class(network)<-"regulon"
save(network,file="/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan/inst/extdata/network.rda")
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
?vulcan
# Generate an annotation file from the dummy ChIP-Seq dataset
vfile<-"deleteme.csv"
vulcansheet(vfile)
# Import BAM and BED information into a list object
vobj<-vulcan.import(vfile)
unlink(vfile)
# Annotate peaks to gene names
vobj<-vulcan.annotate(vobj,lborder=-10000,rborder=10000,method="sum")
# Normalize data for VULCAN analysis
vobj<-vulcan.normalize(vobj)
# Detect which conditions are present
names(vobj$samples)
# Load an ARACNe network
# This is a regulon object as specified in the VIPER package, named "network"
load(system.file("extdata","network.rda",package="vulcan",mustWork=TRUE))
# Run VULCAN
# We can reduce the minimum regulon size, since in this example only one chromosome
# was measured, and the networks would otherwise have too few hits
vobj_analysis<-vulcan(vobj,network=network,contrast=c("t90","t0"),minsize=5)
# Visualize output using the msviper plotting function
plot(vobj_analysis$msviper,mrs=7)
library(BiocCheck)
source("http://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library(BiocCheck)
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
library(BiocCheck)
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
library(BiocCheck)
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
?rea
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
dcoument()
library(devtools)
document()
document()
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
BiocCheck("/Users/giorgi01/Dropbox/rstudio/vulcanpackage/vulcan")
